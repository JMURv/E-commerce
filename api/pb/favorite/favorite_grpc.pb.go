// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: favorite/favorite.proto

package favorite

import (
	context "context"
	common "github.com/JMURv/e-commerce/api/pb/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FavoriteService_GetAllUserFavorites_FullMethodName = "/favorite.FavoriteService/GetAllUserFavorites"
	FavoriteService_GetFavoriteByID_FullMethodName     = "/favorite.FavoriteService/GetFavoriteByID"
	FavoriteService_CreateFavorite_FullMethodName      = "/favorite.FavoriteService/CreateFavorite"
	FavoriteService_DeleteFavorite_FullMethodName      = "/favorite.FavoriteService/DeleteFavorite"
)

// FavoriteServiceClient is the client API for FavoriteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FavoriteServiceClient interface {
	GetAllUserFavorites(ctx context.Context, in *GetAllUserFavoritesRequest, opts ...grpc.CallOption) (*ListFavoritesResponse, error)
	GetFavoriteByID(ctx context.Context, in *FavoriteIDRequest, opts ...grpc.CallOption) (*common.Favorite, error)
	CreateFavorite(ctx context.Context, in *CreateFavoriteRequest, opts ...grpc.CallOption) (*common.Favorite, error)
	DeleteFavorite(ctx context.Context, in *DeleteFavoriteIDRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type favoriteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFavoriteServiceClient(cc grpc.ClientConnInterface) FavoriteServiceClient {
	return &favoriteServiceClient{cc}
}

func (c *favoriteServiceClient) GetAllUserFavorites(ctx context.Context, in *GetAllUserFavoritesRequest, opts ...grpc.CallOption) (*ListFavoritesResponse, error) {
	out := new(ListFavoritesResponse)
	err := c.cc.Invoke(ctx, FavoriteService_GetAllUserFavorites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteServiceClient) GetFavoriteByID(ctx context.Context, in *FavoriteIDRequest, opts ...grpc.CallOption) (*common.Favorite, error) {
	out := new(common.Favorite)
	err := c.cc.Invoke(ctx, FavoriteService_GetFavoriteByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteServiceClient) CreateFavorite(ctx context.Context, in *CreateFavoriteRequest, opts ...grpc.CallOption) (*common.Favorite, error) {
	out := new(common.Favorite)
	err := c.cc.Invoke(ctx, FavoriteService_CreateFavorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteServiceClient) DeleteFavorite(ctx context.Context, in *DeleteFavoriteIDRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, FavoriteService_DeleteFavorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FavoriteServiceServer is the server API for FavoriteService service.
// All implementations must embed UnimplementedFavoriteServiceServer
// for forward compatibility
type FavoriteServiceServer interface {
	GetAllUserFavorites(context.Context, *GetAllUserFavoritesRequest) (*ListFavoritesResponse, error)
	GetFavoriteByID(context.Context, *FavoriteIDRequest) (*common.Favorite, error)
	CreateFavorite(context.Context, *CreateFavoriteRequest) (*common.Favorite, error)
	DeleteFavorite(context.Context, *DeleteFavoriteIDRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedFavoriteServiceServer()
}

// UnimplementedFavoriteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFavoriteServiceServer struct {
}

func (UnimplementedFavoriteServiceServer) GetAllUserFavorites(context.Context, *GetAllUserFavoritesRequest) (*ListFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserFavorites not implemented")
}
func (UnimplementedFavoriteServiceServer) GetFavoriteByID(context.Context, *FavoriteIDRequest) (*common.Favorite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteByID not implemented")
}
func (UnimplementedFavoriteServiceServer) CreateFavorite(context.Context, *CreateFavoriteRequest) (*common.Favorite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFavorite not implemented")
}
func (UnimplementedFavoriteServiceServer) DeleteFavorite(context.Context, *DeleteFavoriteIDRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFavorite not implemented")
}
func (UnimplementedFavoriteServiceServer) mustEmbedUnimplementedFavoriteServiceServer() {}

// UnsafeFavoriteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FavoriteServiceServer will
// result in compilation errors.
type UnsafeFavoriteServiceServer interface {
	mustEmbedUnimplementedFavoriteServiceServer()
}

func RegisterFavoriteServiceServer(s grpc.ServiceRegistrar, srv FavoriteServiceServer) {
	s.RegisterService(&FavoriteService_ServiceDesc, srv)
}

func _FavoriteService_GetAllUserFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserFavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).GetAllUserFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteService_GetAllUserFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).GetAllUserFavorites(ctx, req.(*GetAllUserFavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteService_GetFavoriteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).GetFavoriteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteService_GetFavoriteByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).GetFavoriteByID(ctx, req.(*FavoriteIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteService_CreateFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).CreateFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteService_CreateFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).CreateFavorite(ctx, req.(*CreateFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteService_DeleteFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFavoriteIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).DeleteFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteService_DeleteFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).DeleteFavorite(ctx, req.(*DeleteFavoriteIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FavoriteService_ServiceDesc is the grpc.ServiceDesc for FavoriteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FavoriteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "favorite.FavoriteService",
	HandlerType: (*FavoriteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllUserFavorites",
			Handler:    _FavoriteService_GetAllUserFavorites_Handler,
		},
		{
			MethodName: "GetFavoriteByID",
			Handler:    _FavoriteService_GetFavoriteByID_Handler,
		},
		{
			MethodName: "CreateFavorite",
			Handler:    _FavoriteService_CreateFavorite_Handler,
		},
		{
			MethodName: "DeleteFavorite",
			Handler:    _FavoriteService_DeleteFavorite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "favorite/favorite.proto",
}
